package ch07;

public class _01_Main {

		public static void main(String [ ] args) {
			/*
			 * 	추상이란 ?
			 *  - 여러가지 사물이나 개념으로부터 공통이 되는 특성을 파악하는 것을 말한다.
			 *  
			 *  [면접]
			 * 1. 추상클래스   ==> 작업명세서 	
			 * - 하나이상의 추상메소드를 가지고있는 클래스를 의미한다.
			 * - abstract 키워드를 이용하여 구현되지 않는 추상메소드를 기술할 수 있다.
			 * - 자식클래스에게 구현을 위임하고자 할 때 사용되며, 프로그램의 확장성을 취해 많이 사용하는 설계방법이다.
			 * - 추상클래스는 일반메소드, 추상메소드 모두 올 수 있다.
			 * - 전제조건은 반드시 상속을 해야한다.
			 * - 다형성 적용이 가능하다.
			 * 
			 * - 문법 : public abstract class 클래스명 {
			 * 			public abstract 반환형 메소드명 ( );   //추상메소드
			 * 				 }
			 * 			
			 * 2. 추상 메소드 			
			 *  - 하위클래스가 어떤 클래스냐에따라 구현코드가 달라지며, 하위클래스에 구현을 위임
			 * 	- 미완성되어있는 메소드이며, 몸체가없는 메소드로서 항상 세미콜론 ( );	 으로 종료 되어야함
			 * 
			 * 3. 추상클래스의 상속 
			 * 	- 추상클래스를 상속받은 자식클래스는 추상메소드를 반드시 재정의(오버라이드)해야하며, 재정의하지 않으면 컴파일오류발생
			 * 	- 자식 클래스에게 강제성과 통일성을 줄 수 있다. (협업시)
			 * 
			 * 4. 추상클래스의 객체 생성
			 * 	- 추상클래스는 객체를 생성할 수 없으며(추상 메소드 때문), 상속 계층에서
			 * 	  추상적인 개념을 나타내기 위한 용도로 사용한다.
			 * 
			 * 	- 상속을 통하여 자식클래스에서 추상메소드를 구현하고, 자식클래스 객체를 생성하여 메소드를 접근할 수 있다.
			 * 
			 * 
			 */
				// 추상클래스는 인스턴스를 생성할 수 없다 (추상 메소드는 구현안된 불완전한 메소드이므로)
				// _01_Computer computer = new _01_Computer();  ==> 오류
			    // _01_NoteBook nb = _01_NoteBook (); ==> 오류 
			
					_01_Computer desk = new _01_Desktop ( ) ;    //다형성 적용 에러발생하지않음.
					desk.turnOff();
					desk.turnOn();
					desk.display();
					desk.typing();
					
					System.out.println("==========================");
					
					_01_Computer myNb = new _01_MyNoteBook(); //자식 abstract 클래스는 객체생성못함, abstract 다 해결하여야함
					myNb.turnOff();	  //자식의 하위클래스(손자클래스 - 자식의 클래스를 extends함)도 부모메소드 모두구현가능
					myNb.turnOn();		
					myNb.display();
					myNb.typing();
					
					
					
					
		}

}
